В этой главе вы научитесь тестировать код средствами модуля Python unittest.
Вы узнаете, как построить тестовые сценарии, как проверить, выдает ли программа
для конкретных входных данных ожидаемый результат и как тестировать функ-
ции и классы. Также вы научитесь оценивать, сколько тестов нужно написать для
проекта.

Итоги
В этой главе вы научились писать тесты для функций и классов с использованием
средств модуля unittest. Вы узнали, как написать класс, наследующий от unittest.
TestCase, и как писать тестовые методы для проверки конкретных аспектов пове-
дения ваших функций и классов. Вы научились использовать метод setUp() для
эффективного создания экземпляров и атрибутов, которые могут использоваться
во всех методах для тестирования класса.
Тестирование — важная тема, на которую многие новички не обращают вни-
мания. Пока вы делаете свои первые шаги в программировании, писать тесты
для простых проектов не нужно. Но как только вы начинаете работать над про-
ектами, требующими значительных затрат ресурсов на разработку, непременно
обеспечьте тестирование критических аспектов поведения ваших функций
и классов. С эффективными тестами вы можете быть уверены в том, что измене-
ния в проекте не повредят тому, что уже работает, а это развяжет вам руки для
усовершенствования кода. Случайно нарушив существующую функциональность,
вы немедленно узнаете об этом, что позволит вам быстро исправить проблему.
Отреагировать на сбой теста всегда намного проще, чем на отчет об ошибке от не-
довольного пользователя.
Другие программисты будут более уважительно относиться к вашим проектам, если
вы включите в них исходные тесты. Они будут чувствовать себя более ­комфортно,Итоги?? 223
экспериментируя с вашим кодом, и с большей готовностью присоединятся к уча-
стию в ваших проектах. Если вы будете участвовать в проекте, над которым работа-
ют другие программисты, вам придется продемонстрировать, что ваш код проходит
существующие тесты; кроме того, от вас будут ждать, что вы напишете тесты для
нового поведения, добавленного вами в проект.
Поэкспериментируйте с тестами и освойтесь с процессом тестирования кода.
­Пишите тесты для критических аспектов поведения ваших функций и классов,
но не стремитесь к полному тестовому покрытию своих ранних проектов (если
у вас для этого нет особых причин).